@using Microsoft.Extensions.Configuration;
@using System.Collections.Generic;
@using System.Data;
@using Microsoft.Data.SqlClient;
@using System.Threading.Tasks;
@using Microsoft.EntityFrameworkCore.Migrations.Operations;
@using TravelClubProto.Data;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject DataAccessService DaService
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white">
    <div class="container" style="float:right;">
        <a href="/">
            <BSImage Class="Logo1" src="https://i.imgur.com/KwVrth8.png" alt="Logo1" style="image-resolution:from-image;" ></BSImage>
        </a>
        <button class="navbar-toggler" type="button" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <ul class="navbar-nav flex-grow-1">
                <li class="nav-item">
                    <NavLink class="nav-link text-dark Nav Bar" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Home
                    </NavLink>
                </li>
                @*<li class="nav-item">
                    <NavLink class="nav-link text-dark Nav Bar" href="counter">
                        <span class="oi oi-plus" aria-hidden="true"></span> Counter
                    </NavLink>
                </li>*@
                @*<li class="nav-item">
                    <NavLink class="nav-link text-dark Nav Bar" href="fetchdata">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch Data
                    </NavLink>
                </li>*@
                <li class="nav-item">
                    <NavLink class="nav-link text-dark Nav Bar" href="vacationView">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> View Vacations
                    </NavLink>
                </li>
                @*<li class="nav-item">
                    <NavLink class="nav-link text-dark Nav Bar" href="ProposeVacation">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Propose Vacation
                    </NavLink>
                </li>*@
                @*<li class="nav-item">
                    <NavLink class="nav-link text-dark Nav Bar" href="AddDestination">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Add Destination
                    </NavLink>
                    <i class='fas fa-user-alt'></i>
                </li>*@
                @*<li class="nav-item">
                    <NavLink class="nav-link text-dark Nav Bar" href="SingleVacation/ID">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> View single vacation
                    </NavLink>
                    <i class='fas fa-user-alt'></i>
                </li>*@
            </ul>
        </div>
    </div>



    @if (DaService.LoggedIn == false)
    {
        <div class="dropdown">
            <div class="HamburgerMenu">
                <BSDropdown>
                    <BSDropdownToggle Class="oi oi-menu">
                        <BSDropdownMenu Right="true">
                            <BSDropdownItem Href="javascript:void(0);" @onclick="PromptLogin">Log ind</BSDropdownItem>
                            <BSDropdownItem Href="javascript:void(0);" @onclick="CreateProfile">Opret Bruger</BSDropdownItem>
                        </BSDropdownMenu>
                    </BSDropdownToggle>
                </BSDropdown>
            </div>
        </div>
    }
    else
    {
        <div class="dropdown">
            <div class="HamburgerMenu">
                <BSDropdown>
                    <BSDropdownToggle class="btn btn-outline-info btn-lg UserIcon" type="button">
                        <BSDropdownMenu Right="true">
                            <BSDropdownItem Href="MyTravelClub" @onclick="OnToggleMyProfile">Min profil</BSDropdownItem>
                            <BSDropdownItem Href="" @onclick="LogOut">Log ud</BSDropdownItem>
                        </BSDropdownMenu>
                    </BSDropdownToggle>
                </BSDropdown>
            </div>
        </div>
    }
</nav>

@*MODAL FOR LOGIN PROMPT*@
<BSModal @ref="LoginModal" IsCentered="true">
    <BSModalHeader OnClick="@OnToggleLogin">Log ind</BSModalHeader>
    <BSModalBody>
        <p>
            <BSForm Model="@formsModelVal" OnValidSubmit="ConsoleWrite">

                <BSFormGroup>
                    @*Input for user email*@
                    <BSLabel for="InputEmail">Email-adresse</BSLabel>
                    <BSInput id="InputEmail" InputType="InputType.Email" PlaceHolder="Indtast Email" @bind-Value="formsModelVal.Email"></BSInput>
                </BSFormGroup>

                <BSFormGroup>
                    @*Input for user password*@
                    <BSLabel for="InputPassword">Kodeord</BSLabel>
                    <BSInput id="InputPassword" InputType="InputType.Password" PlaceHolder="Indtast Kodeord" @bind-Value="formsModelVal.Password"></BSInput>
                </BSFormGroup>

                <BSFormGroup IsCheck="true">
                    @*Remember me check box*@
                    <BSInput Id="ModalCheck" InputType="InputType.Checkbox" @bind-Value="formsModelVal.Valid"></BSInput>
                    <BSLabel IsCheck="true" For="ModalCheck">Husk mig</BSLabel>
                </BSFormGroup>

                @*Submit Button*@
                <BSButton Color="Color.Primary" ButtonType="ButtonType.Submit" @onclick="LogInToProfile">Log ind</BSButton>
            </BSForm>
        </p>
    </BSModalBody>
</BSModal>

@*MODAL FOR CREATEPROFILE PROMPT*@
<BSModal @ref="CreateProfileModal" IsCentered="true">
    <BSModalHeader OnClick="@OnToggleCreateProfile">Opret Bruger</BSModalHeader>
    <BSModalBody>
        <p>
            <BSForm Model="@formsModelVal" OnValidSubmit="ConsoleWrite">

                <BSFormGroup>
                    @*Input for user email*@
                    <BSLabel for="InputEmail">Email-adresse</BSLabel>
                    <BSInput id="InputEmail" InputType="InputType.Email" PlaceHolder="Indtast Email" @bind-Value="formsModelVal.Email"></BSInput>
                </BSFormGroup>

                <BSFormGroup>
                    @*Input for user password*@
                    <BSLabel for="InputPassword">Kodeord</BSLabel>
                    <BSInput id="InputPassword" InputType="InputType.Password" PlaceHolder="Indtast Kodeord" @bind-Value="formsModelVal.Password"></BSInput>
                </BSFormGroup>

                @*Submit Button*@
                <BSButton Color="Color.Primary" ButtonType="ButtonType.Submit" @onclick="SaveProfileToTables">Opret Bruger</BSButton>
            </BSForm>
        </p>
    </BSModalBody>
</BSModal>

<BSModal @ref="WarningBox" Size="Size.Medium">
    <BSModalHeader Class="Modal-title text-center" OnClick="@LogInToProfile">INFO</BSModalHeader>
    <BSModalBody><p>Den indtastede Email eller Password er ikke indtastet korrekt. <br /> Prøv venligst igen.</p></BSModalBody>
</BSModal>

@if (DaService.LoggedIn == true)
{
    //Midlertidig løsning, den skal kunne fade ud af sig selv
<BSAlert @ref="LoggedInBox" IsDismissible="true" Color="Color.Info">
        Du er nu logget ind!
</BSAlert>
}


@code {

    BSAlert LoggedInBox { get; set; }

    BSModal WarningBox { get; set; }

    BSModal LoginModal;

    BSModal CreateProfileModal;

    Account acc;


    void OnToggleLogin(MouseEventArgs e)
    {
        LoginModal.Toggle();
    }

    void OnToggleCreateProfile(MouseEventArgs e)
    {
        CreateProfileModal.Toggle();
    }

    void OnToggleMyProfile(MouseEventArgs e)
    {
        MyProfile(DaService);
    }

    async void MyProfile(DataAccessService daService)
    {
        if (daService.LoggedIn == true)
        {
            string loginInfo = await localStorage.GetItemAsync<String>("login");
            string[] loginresult = loginInfo.Split(",");
            int ID = Convert.ToInt32(loginresult[0]);
            DateTime expiry = Convert.ToDateTime(loginresult[1]);
            if (expiry > DateTime.Now)
            {
                Login login = new Login();
                acc = await login.GetAccountByID(daService, ID);
                DaService.LoggedInType = acc.Type;
            }


        }
    }

    async void LogInToProfile(MouseEventArgs e)
    {
        //returnerer ID ved succes og -1 ved fail
        int ID = await DaService.FindAccountInDatabase(formsModelVal.Email, formsModelVal.Password, DaService);

        LoginModal.Toggle();

        if (DaService.LoggedIn == false)
        {
            WarningBox.Toggle();

        }
        else
        {
            DateTime expiry = DateTime.Now.AddHours(2);
            await localStorage.ClearAsync();
            await localStorage.SetItemAsync("login", ID + "," + expiry);
        }

    }

    void SaveProfileToTables(MouseEventArgs e)
    {
        Customer newUser = new Customer(formsModelVal.Email, formsModelVal.Password, DaService);
        newUser.InsertIntoDatabase();
        CreateProfileModal.Toggle();
    }

    bool collapseNavMenu = true;

    string baseMenuClass = "navbar-collapse d-sm-inline-flex flex-sm-row-reverse";

    string NavMenuCssClass => baseMenuClass + (collapseNavMenu ? " collapse" : "");

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    void PromptLogin(MouseEventArgs e)
    {
        OnToggleLogin(e);
    }

    void CreateProfile(MouseEventArgs e)
    {
        OnToggleCreateProfile(e);
    }


    void ConsoleWrite()
    {
        Console.WriteLine("Form succesfully submitted");
    }


    void LogOut(MouseEventArgs e)
    {
        DaService.LoggedIn = false;
    }

    public class FormsModelVal
    {
        [Required]
        [StringLength(50, ErrorMessage = "email too long (50 character limit).")]
        public string Email { get; set; }

        [Required]
        [StringLength(20, ErrorMessage = "password too long (20 character limit).")]
        public string Password { get; set; }

        [Required]
        public Boolean Valid { get; set; }
    }
    public FormsModelVal formsModelVal = new FormsModelVal();

}
