@page "/vacationView/{DepartureAirportPara}/{CountryPara}/{DepartureDatePara}/{ArrivalDatePara}"
@page "/vacationView"
@using TravelClubProto.Data
@using TravelClubProto.Pages
@using Microsoft.AspNetCore;
@using BlazorStrap;
@using Blazored;
@inject DataAccessService DaService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JS;

<h3>Se ferier</h3>

<button class="btn btn-danger" @onclick="OrderByPrice">Order by Price</button>
<button class="btn btn-danger" @onclick="OrderByDeadline">Order by Deadline date</button>
<div class="container">
    <div class="row">
        <div class="col-sm-2"> <br />   
            <h6>Afrejse Dato</h6>
            <input type="date" id="start" name="trip-start" @onchange="eventArgs => { ArrivalDateUpdate( eventArgs.Value); }" min=@DateTime.Now>
            <h6><b>Lande</b></h6>
            @foreach (Destination dest in activeDestinations)
            {
                <input type="checkbox" id="@dest.Country" @ref="destinationCheckbox[dest.Country]" @onchange="eventArgs => { CheckboxClickedDest(dest.Country, eventArgs.Value); }" />@dest.Country<br />
            }
        <br />  
            <h6><b>Aktiviteter</b> </h6>
            @foreach (Activity act in activeActivities)
            {
                <input type="checkbox" @onchange="eventArgs => { CheckboxClickedAct(act, eventArgs.Value); }" />@act.Type<br />
            }
        <br />  
            <h6><b>Lufthavne</b> </h6>
            @foreach (string departureAirport in activeAirports)
            {
                <input type="checkbox" id="@departureAirport" @ref="departureAirportCheckbox[departureAirport]" @onchange="eventArgs => { CheckboxClickedAirport(departureAirport, eventArgs.Value); }" />@departureAirport<br />
            }

        </div>
        <div class="col-sm-10">
            <h2>@noSearchFeedback</h2>
            @foreach (Vacation vac in ViewedVacations)
            {
                int joinedUsersHolder = vac.TravelGroup.GetUserIDsFromRelation(vac.ID, "Joined").ConfigureAwait(true).GetAwaiter().GetResult().Count;
                int stretchGoalsMax = vac.StretchGoals.Max();
        <BSJumbotron>
            <a class="" href="/SingleVacation/@vac.ID.ToString()" role="button" show="Hide">
                <div class="ViewVacationImage">
                    <BSFigureImage src="@vac.ImageLink" />
                </div>
            </a>
                
            <div class="ViewDescriptionRow">
                <div class="VacationHotelColumn">
                    <h2>@vac.Destination.Hotel, @vac.Destination.Location</h2>                   

                    <h2>Feriebeskrivelse: </h2>
                    <p>@vac.Description</p>
                </div>
            </div>

            <br />

                    <div class="ViewVacPriceContainer">
                        <div class="progressBarGenerator">
                            @for (int i = 0; i < vac.StretchGoals.Count; i++)
                            {
                                <div class="progStretchGoal">
                                    <progress class="progressBarJoinedUsers" max=@vac.StretchGoals[i] value=@ValueCalc(vac.StretchGoals, vac.StretchGoals[i], joinedUsersHolder)></progress>
                                    <div class="progressBarPriceGoal">
                                        @(vac.Prices[i]+ " kr.")
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="ViewVacationButtons">
                            <input type="button" id="@vac.ID" value="" class="btn btn-outline-info btn-lg HeartIconNotFill" @onclick="@(e => FavouriteVacation(vac))" @ref="heartFavourite[vac.ID]"/>
                            <a class="InfoButton btn-primary" href="/SingleVacation/@vac.ID.ToString()" role="button">Se mere</a>
                        </div>
                        <br/> 
                        <div class="ViewVacDeadlineDate">
                            <h6>Deadline: @vac.Dates["Deadline"]</h6>
                        </div>
                    </div>

            @*MODAL FOR LOGIN PROMPT*@
            <BSModal @ref="LoginModal" IsCentered="true">
                <BSModalHeader OnClick="@OnToggleLogin">Log ind</BSModalHeader>
                <BSModalBody>
                    <p>
                        <BSForm Model="@formsModelVal" OnValidSubmit="ConsoleWrite">

                            <BSFormGroup>
                                @*Input for user email*@
                                <BSLabel for="InputEmail">Email-adresse</BSLabel>
                                <BSInput id="InputEmail" InputType="InputType.Email" PlaceHolder="Indtast Email" @bind-Value="formsModelVal.Email"></BSInput>
                            </BSFormGroup>

                            <BSFormGroup>
                                @*Input for user password*@
                                <BSLabel for="InputPassword">Kodeord</BSLabel>
                                <BSInput id="InputPassword" InputType="InputType.Password" PlaceHolder="Indtast Kodeord" @bind-Value="formsModelVal.Password"></BSInput>
                            </BSFormGroup>

                            <BSButton class="createAccount" @onclick="OnToggleCreateProfile">Har du ikke en profil? Opret en profil her!</BSButton>

                            @*Submit Button*@
                            <BSButton Color="Color.Primary" ButtonType="ButtonType.Submit" @onclick="LogInToProfile">Log ind</BSButton>
                        </BSForm>
                    </p>
                </BSModalBody>
            </BSModal>

            @*MODAL FOR CREATEPROFILE PROMPT*@
            <BSModal @ref="CreateProfileModal" IsCentered="true">
                <BSModalHeader OnClick="@OnToggleCreateProfile">Opret Bruger</BSModalHeader>
                <BSModalBody>
                    <p>
                        <BSForm Model="@formsModelVal" OnValidSubmit="ConsoleWrite">

                            <BSFormGroup>
                                @*Input for user email*@
                                <BSLabel for="InputEmail">Email-adresse</BSLabel>
                                <BSInput id="InputEmail" InputType="InputType.Email" PlaceHolder="Indtast Email" @bind-Value="formsModelVal.Email"></BSInput>
                            </BSFormGroup>

                            <BSFormGroup>
                                @*Input for user password*@
                                <BSLabel for="InputPassword">Kodeord</BSLabel>
                                <BSInput id="InputPassword" InputType="InputType.Password" PlaceHolder="Indtast Kodeord" @bind-Value="formsModelVal.Password"></BSInput>
                            </BSFormGroup>

                            <BSButton class="createAccount" @onclick="OnToggleLogin">Har du allerede en profil? Log ind!</BSButton>

                            @*Submit Button*@
                            <BSButton Color="Color.Primary" ButtonType="ButtonType.Submit" @onclick="SaveProfileToTables">Opret Bruger</BSButton>
                        </BSForm>
                    </p>
                </BSModalBody>
            </BSModal>

            <BSModal @ref="WarningBox" Size="Size.Medium">
                <BSModalHeader Class="Modal-title text-center" OnClick="@LogInToProfile">INFO</BSModalHeader>
                <BSModalBody><p>Den indtastede Email eller Password er ikke indtastet korrekt. <br /> Prøv venligst igen.</p></BSModalBody>
            </BSModal>


                </BSJumbotron>
            }
        </div>
    </div>
</div>


@code {
    BSModal WarningBox { get; set; }
    BSModal LoginModal;
    BSModal CreateProfileModal;
    int customerID;
    public List<Vacation> ViewedVacations;
    public List<Vacation> vacations;
    public List<Destination> destinations;
    public List<Destination> activeDestinations = new List<Destination>();
    public List<Activity> activeActivities = new List<Activity>();
    public List<string> activeAirports = new List<string>();
    string notloggedinfeedback;
    string noSearchFeedback;
    private string DepartureAirportSearch;
    private string CountrySearch;
    private DateTime departureDateSearch;
    private DateTime arrivalDateSearch;
    private int minimumJoinedUsers;
    private Dictionary<string, ElementReference> destinationCheckbox = new Dictionary<string, ElementReference>();
    private Dictionary<string, ElementReference> departureAirportCheckbox = new Dictionary<string, ElementReference>();
    private Dictionary<int, ElementReference> heartFavourite = new Dictionary<int, ElementReference>();

    [Parameter]
    public string DepartureAirportPara { get; set; }

    [Parameter]
    public string CountryPara { get; set; }

    [Parameter]
    public string DepartureDatePara { get; set; }

    [Parameter]
    public string ArrivalDatePara { get; set; }


    protected override void OnParametersSet()
    {
        GetSearchParams();


        UpdateViewedVacation(true);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            FillCheckBox();
            CheckForAndFillHearts();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        departureDateSearch = DateTime.Now;
        vacations = await DaService.GetAllPublishedVacations(DaService);
        destinations = await DaService.GetAllDestinations(DaService);
        ViewedVacations = vacations.ToList();
        foreach (Vacation vacation in vacations)
        {
            if (!(activeDestinations.Contains(vacation.Destination)))
            {
                activeDestinations.Add(vacation.Destination);
            }

            foreach (Activity act in vacation.Destination.Activities)
            {
                if (!(activeActivities.Contains(act)))
                {
                    activeActivities.Add(act);
                }
            }

            if (!(activeAirports.Contains(vacation.DepartureAirport)))
            {
                activeAirports.Add(vacation.DepartureAirport);
            }
        }

        UpdateViewedVacation(true);

    }

    void OnToggleLogin(MouseEventArgs e)
    {
        CreateProfileModal.Hide();
        LoginModal.Toggle();
    }

    void OnToggleCreateProfile(MouseEventArgs e)
    {
        LoginModal.Hide();
        CreateProfileModal.Toggle();
    }

    async void LogInToProfile(MouseEventArgs e)
    {
        //returnerer ID ved succes og -1 ved fail
        int ID = await DaService.FindAccountInDatabase(formsModelVal.Email, formsModelVal.Password, DaService);

        LoginModal.Toggle();

        if (DaService.LoggedIn == false)
        {
            WarningBox.Toggle();

        }
        else
        {
            DateTime expiry = DateTime.Now.AddHours(2);
            await localStorage.ClearAsync();
            await localStorage.SetItemAsync("login", ID + "," + expiry);
        }
    }

    void SaveProfileToTables(MouseEventArgs e)
    {
        Customer newUser = new Customer(formsModelVal.Email, formsModelVal.Password, DaService);
        newUser.InsertIntoDatabase();
        CreateProfileModal.Toggle();
    }

    public void GetSearchParams()
    {
        departureDateSearch = DateTime.FromBinary(Convert.ToInt64(DepartureDatePara));
        arrivalDateSearch = DateTime.FromBinary(Convert.ToInt64(ArrivalDatePara));
        DepartureAirportSearch = DepartureAirportPara;
        CountrySearch = CountryPara;
    }

    private void CheckForAndFillHearts()
    {
        checkCookie();
        if (DaService.LoggedIn == true)
        {
            foreach (Vacation vac in vacations)
            {
                if (vac.TravelGroup.CheckForRelation(DaService.LoggedInAccountID, "Favourited").GetAwaiter().GetResult() == true)
                {
                    JS.InvokeAsync<string>("FillHeart", Convert.ToString(vac.ID));
                }
            }
        }
    }

    private void FillCheckBox()
    {
        foreach (KeyValuePair<string, ElementReference> item in destinationCheckbox)
        {
            if (item.Key == CountrySearch)
            {
                JS.InvokeAsync<string>(
                "FillCheckBox", item.Key);
            }
        }
        foreach (KeyValuePair<string, ElementReference> item in departureAirportCheckbox)
        {
            if (item.Key == DepartureAirportSearch)
            {
                JS.InvokeAsync<string>(
                "FillCheckBox", item.Key);
            }
        }
    }

    public class FormsModelVal
    {
        [Required]
        [StringLength(50, ErrorMessage = "email too long (50 character limit).")]
        public string Email { get; set; }

        [Required]
        [StringLength(20, ErrorMessage = "password too long (20 character limit).")]
        public string Password { get; set; }

        [Required]
        public Boolean Valid { get; set; }
    }
    FormsModelVal formsModelVal = new FormsModelVal();

    void ConsoleWrite()
    {
        Console.WriteLine("Form succesfully submitted");
    }

    public async void checkCookie()
    {
        string cookie = await localStorage.GetItemAsync<String>("login");

        if (cookie != null)
        {
            string[] splitCookie = cookie.Split(",");
            if (Convert.ToDateTime(splitCookie[1]) > DateTime.Now)
            {
                customerID = Convert.ToInt32(splitCookie[0]);
            }
        }
    }


    //Calculates progress bar fill value from joined user and stretch goals
    int ValueCalc(List<int> stretchGoals, int currGoal, int joinedUsers)
    {
        int prevIndex = stretchGoals.IndexOf(currGoal) == 0 ? 0 : stretchGoals.IndexOf(currGoal) - 1;
        int prevGoal = stretchGoals[prevIndex];

        if (joinedUsers >= currGoal)
        {
            return currGoal;
        }
        else if (currGoal.Equals(stretchGoals[0]))
        {
            return joinedUsers;
        }
        else
        {
            return joinedUsers - prevGoal;
        }
    }

    public void FavouriteVacation(Vacation vac)
    {

        if (DaService.LoggedIn == true)
        {
            if (vac.TravelGroup.CheckForRelation(customerID, "Favourited").GetAwaiter().GetResult() == false)
            {
                checkCookie();
                vac.TravelGroup.ChangeVacationRelation(customerID, "Favourited");
                JS.InvokeAsync<string>("ToggleClass", Convert.ToString(vac.ID));
            }
            else
            {
                vac.TravelGroup.LeaveVacation(customerID);
                JS.InvokeAsync<string>("ToggleClass", Convert.ToString(vac.ID));
            }
        }
        else
        {
            notloggedinfeedback = string.Empty;
            notloggedinfeedback = "Du skal være logged in før du kan bruge denne funktionalitet";
            LoginModal.Toggle();
        }
    }

    public void OrderByPrice()
    {
        ViewedVacations = ViewedVacations.OrderBy(v => v.Prices[0]).ToList();
    }

    public void OrderByPriceDescending()
    {
        ViewedVacations = ViewedVacations.OrderByDescending(v => v.Prices[0]).ToList();
    }

    public void OrderByDeadline()
    {
        ViewedVacations = ViewedVacations.OrderBy(v => v.Dates["Deadline"]).ToList();
    }

    public void OrderByDeadlineDescending()
    {
        ViewedVacations = ViewedVacations.OrderByDescending(v => v.Dates["Deadline"]).ToList();
    }

    public class FilterModelValues
    {
        [Required]
        [StringLength(50, ErrorMessage = "email too long (50 character limit).")]
        public string Email { get; set; }

        [Required]
        [StringLength(20, ErrorMessage = "password too long (20 character limit).")]
        public string Password { get; set; }

        [Required]
        public Boolean Valid { get; set; }
    }
    FilterModelValues FilterModelVal = new FilterModelValues();

    void ArrivalDateUpdate(object checkedValue)
    {
        departureDateSearch = DateTime.Parse((string)checkedValue);

        UpdateViewedVacation(false);
    }

    public List<string> ChosenCountries { get; set; } = new List<string>();
    void CheckboxClickedDest(string value, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!ChosenCountries.Contains(value))
            {
                ChosenCountries.Add(value);
            }
        }
        else
        {
            if (ChosenCountries.Contains(value))
            {
                ChosenCountries.Remove(value);
            }
        }
        UpdateViewedVacation(false);
    }

    public List<Activity> ChosenActivities { get; set; } = new List<Activity>();
    void CheckboxClickedAct(Activity value, object checkedValue)
    {

        if ((bool)checkedValue)
        {
            if (!ChosenActivities.Contains(value))
            {
                ChosenActivities.Add(value);
            }
        }
        else
        {
            if (ChosenActivities.Contains(value))
            {
                ChosenActivities.Remove(value);
            }
        }
        UpdateViewedVacation(false);
    }

    public List<string> ChosenAirports { get; set; } = new List<string>();
    void CheckboxClickedAirport(string value, object checkedValue)
    {

        if ((bool)checkedValue)
        {
            if (!ChosenAirports.Contains(value))
            {
                ChosenAirports.Add(value);
            }
        }
        else
        {
            if (ChosenAirports.Contains(value))
            {
                ChosenAirports.Remove(value);
            }
        }
        UpdateViewedVacation(false);
    }

    private void UpdateViewedVacation(bool calledFromRender)
    {
        if (calledFromRender)
        {
            if (DepartureAirportPara == null)
            {
                ViewedVacations = vacations.ToList();
            }
            else
            {
                CheckboxClickedDest(CountrySearch, true);
                CheckboxClickedAirport(DepartureAirportPara, true);
            }
        }


        ViewedVacations = vacations.ToList();


        if (ChosenCountries.Count() > 0)
        {
            ViewedVacations = ViewedVacations.Where(v => ChosenCountries.Contains(v.Destination.Country)).ToList();
        }

        if (ChosenActivities.Count() > 0)
        {
            List<Vacation> foundVacs = new List<Vacation>();
            foreach (Activity actString in ChosenActivities)
            {
                foreach (Vacation vac in ViewedVacations)
                {
                    if (vac.Destination.Activities.Contains(actString))
                    {
                        foundVacs.Add(vac);
                    }
                }
            }
            ViewedVacations = foundVacs.ToList();
        }

        if (ChosenAirports.Count > 0)
        {
            ViewedVacations = ViewedVacations.Where(v => ChosenAirports.Contains(v.DepartureAirport)).ToList();
        }

        ViewedVacations = ViewedVacations.Where(v => v.Dates["TravelDate"] > departureDateSearch).ToList();

        ViewedVacations = ViewedVacations.Distinct().ToList();

        if (ViewedVacations.Count == 0)
        {
            noSearchFeedback = "Der findes ingen rejser der passer til dine søge filtre";
        }
        else
        {
            noSearchFeedback = "";
        }
    }
}
