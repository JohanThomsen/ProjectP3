@page "/"
@using Blazored.Typeahead
@using TravelClubProto.Data
@inject DataAccessService DaService
<div class="SearchFields">
    

    <BSJumbotron IsFluid="true">
        <BSContainer>
            <BSForm Model="@formsModelVal">
                <BSBasicForm IsInline="true">


                    <BlazoredTypeahead SearchMethod="SearchVacationAirport" @bind-Value="formsModelVal.Afrejselufthavn" Context="Departure" EnableDropDown="true" ShowDropDownOnFocus="true">
                        <SelectedTemplate>@Departure</SelectedTemplate>
                        <ResultTemplate>@Departure</ResultTemplate>
                    </BlazoredTypeahead>

                    <BlazoredTypeahead SearchMethod="SearchVacationDestination" @bind-Value="formsModelVal.Rejsemål" Context="Destination">
                        <SelectedTemplate>@Destination</SelectedTemplate>
                        <ResultTemplate>@Destination</ResultTemplate>
                    </BlazoredTypeahead>

                    <BSFormGroup Class="home-search">
                        <BSLabel for="InputEmail"></BSLabel>
                        <BSInput id="InputEmail" InputType="InputType.Text" PlaceHolder="Afrejselufthavn" @bind-Value="formsModelVal.Afrejselufthavn"></BSInput>
                    </BSFormGroup>

                    <BSFormGroup Class="home-search">
                        <BSLabel for="InputPassword"></BSLabel>
                        <BSInput id="InputPassword" InputType="InputType.Text" PlaceHolder="Rejsemål" @bind-Value="formsModelVal.Rejsemål"></BSInput>
                    </BSFormGroup>

                    <BSFormGroup Class="home-search">
                        <BSLabel for="InputEmail"></BSLabel>
                        <BSInput id="InputEmail" InputType="InputType.Text" PlaceHolder="Afrejse dato" @bind-Value="formsModelVal.AfrejseDato"></BSInput>
                    </BSFormGroup>

                    <BSFormGroup Class="home-search">
                        <BSLabel for="InputPassword"></BSLabel>
                        <BSInput id="InputPassword" InputType="InputType.Text" PlaceHolder="Hjemrejse dato" @bind-Value="formsModelVal.HjemrejseDato"></BSInput>
                    </BSFormGroup>

                    <BSFormGroup Class="home-search">
                        <BSLabel for="InputPassword"></BSLabel>
                        <BSInput id="InputPassword" InputType="InputType.Text" PlaceHolder="Antal deltagere" @bind-Value="formsModelVal.AntalDeltagere"></BSInput>
                    </BSFormGroup>

                    <BSButton Color="Color.Primary" ButtonType="ButtonType.Submit">Søg</BSButton>
                </BSBasicForm>
            </BSForm>
            <h1 class=""></h1>
            <p class=""></p>
        </BSContainer>
    </BSJumbotron>
</div>

<div class="TravelClubInfo">
    <BSJumbotron IsFluid="true">
        <BSContainer>
            <h2 class="InfoOverskrift">Hvad er TravelClub</h2>
            <p class="">Beskrivelsen omkring formålet med TravelClub</p>
        </BSContainer>
    </BSJumbotron>
</div>

<div class="docs-example">
    <BSJumbotron IsFluid="true" Class="ImageContainer">
        <BSFigure Class="VacFigures">
            @foreach (Vacation vac in vacations.Take(10))
            {
                <div class="VacFigureImg">
                    <a href="/SingleVacation/@vac.ID.ToString()">
                        <BSFigureImage src=@vac.ImageLink />
                        <BSFigureCaption>@vac.Destination </BSFigureCaption>
                    </a>
                </div>
            }
        </BSFigure>
    </BSJumbotron>
</div>





@code
{
    private List<Vacation> vacations;
    private List<string> airports = new List<string>();
    private List<string> destinations = new List<string>();
    protected override async Task OnInitializedAsync()
    {
        vacations = await DaService.GetAllVacations(DaService);
        foreach (Vacation vac in vacations)
        {
            if (!(airports.Contains(vac.DepartureAirport)))
            {
                airports.Add(vac.DepartureAirport);
            }

        }

        foreach (Vacation vac in vacations)
        {
            if (!(destinations.Contains(vac.Destination.CountryLocationHotel)))
            {
                destinations.Add(vac.Destination.CountryLocationHotel);
            }
        }
    }

    private async Task<IEnumerable<string>> SearchVacationAirport(string searchText)
    {
        return await Task.FromResult(airports.Where(x => x.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<string>> SearchVacationDestination(string searchText)
    {
        return await Task.FromResult(destinations.Where(x => x.ToLower().Contains(searchText.ToLower())).ToList());
    }

    int GetVacCount()
    {
        Console.WriteLine(vacations.Count);
        if (vacations.Count < 10)
        {
            return vacations.Count;
        }
        else
        {
            return 10;
        }
    }

    public class FormsModelVal
    {

        [StringLength(50, ErrorMessage = "email too long (50 character limit).")]
        public string Afrejselufthavn { get; set; }


        [StringLength(50, ErrorMessage = "password too long (20 character limit).")]
        public string Rejsemål { get; set; }


        [StringLength(50, ErrorMessage = "email too long (50 character limit).")]
        public string AfrejseDato { get; set; }


        [StringLength(50, ErrorMessage = "email too long (50 character limit).")]
        public string HjemrejseDato { get; set; }


        [StringLength(50, ErrorMessage = "email too long (50 character limit).")]
        public int AntalDeltagere { get; set; }

    }
    FormsModelVal formsModelVal = new FormsModelVal();
}