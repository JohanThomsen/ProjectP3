@page "/DeleteButtons"
@using TravelClubProto.Data
@using MailKit.Security
@using MimeKit
@using MimeKit.Text
@using MailKit.Net.Smtp
@inject DataAccessService DaService

<h3>DeleteButtons</h3>
<h2> Rows Affected : @count</h2>
<button class="btn btn-primary" @onclick="DeleteVacations">Delete all vacations</button>
<button class="btn btn-primary" @onclick="DeleteDestinations">Delete all destinations</button>
<button class="btn btn-primary" @onclick="DeleteAccounts">Delete all accounts</button>
<button class="btn btn-primary" @onclick="DeleteCustomers">Delete all customers</button>
<button class="btn btn-primary" @onclick="DeleteCustomerVacationRelations">Delete all Customer Vacation Relations</button>
<button class="btn btn-primary" @onclick="DeletePriceAgents">Delete all PriceAgents</button>
<button class="btn btn-primary" @onclick="DeletePriceAgentRelations">Delete all PriceAgent Relations</button>
<br />
<button class="btn btn-secondary" @onclick="JoinVacation">Test Join</button>
<button class="btn btn-secondary" @onclick="FavouriteVacation">Test Favourite</button>
<button class="btn btn-secondary" @onclick="LeaveVacation">Leave Vacation</button>
<button class="btn btn-secondary" @onclick="GetJoinedUsers">Get All joined users</button>
<button class="btn btn-secondary" @onclick="GetFavouritedUsers">Get all favourited users</button>
<br />
<button class="btn btn-danger" @onclick="PublishVacation">Test Publish</button>
<button class="btn btn-danger" @onclick="RejectVacation">Test Reject</button>
<button class="btn btn-danger" @onclick="CancelVacation">Test Cancel</button>
<button class="btn btn-danger" @onclick="StartGracePeriod">Test GracePeriod</button>
<button class="btn btn-danger" @onclick="CompleteVacation">Test Complete</button>
<button class="btn btn-danger" @onclick="ResetVacation">Test Reset</button>
<br />
<button class="btn btn-dark"  @onclick="EmailCreator">Send Mail</button>



@code {
    int count = 0;
    public void DeleteVacations()
    {
        DeleteCustomerVacationRelations();
        DeletePriceAgentRelations();
        count += DaService.ClearTable("Prices");
        count += DaService.ClearTable("Vacation");

    }

    public void DeleteDestinations()
    {
        count += DaService.ClearTable("Activities");
        DeleteVacations();
        count += DaService.ClearTable("Destination");
    }

    public void DeleteAccounts()
    {
        DeleteCustomerVacationRelations();
        DeletePriceAgents();
        count += DaService.ClearTable("Account");
    }

    public void DeleteCustomers()
    {
        DeleteCustomerVacationRelations();
        DeletePriceAgents();
        count += DaService.DeleteCustomers();
    }

    public void DeleteCustomerVacationRelations()
    {
        count += DaService.ClearTable("CustomerVacationRelations");
    }

    public void DeletePriceAgents()
    {
        DeletePriceAgentRelations();
        count += DaService.ClearTable("PriceAgent");
    }

    public void DeletePriceAgentRelations()
    {
        count += DaService.ClearTable("RelevantVacations");
        count += DaService.ClearTable("DiscardedVacations");
    }

    async public void JoinVacation()
    {
        List<Vacation> templit = await DaService.GetAllVacations(DaService);
        templit[0].TravelGroup.ChangeVacationRelation(15, 4, "Joined");
    }

    async public void FavouriteVacation()
    {
        List<Vacation> templit = await DaService.GetAllVacations(DaService);
        Console.WriteLine(templit[0].ID);
        templit[0].TravelGroup.ChangeVacationRelation(15, 4, "Favourited");
    }

    async public void LeaveVacation()
    {
        List<Vacation> templit = await DaService.GetAllVacations(DaService);
        templit[0].TravelGroup.LeaveVacation(15);
    }

    async public void GetJoinedUsers()
    {
        List<Vacation> templit = await DaService.GetAllVacations(DaService);
        List<int> IDS = await templit[0].TravelGroup.GetUserIDsFromRelation(4, "Joined");
        if (IDS.Count != 0)
        {
            Console.WriteLine(IDS[0]);
        }
    }

    async public void GetFavouritedUsers()
    {
        List<Vacation> templit = await DaService.GetAllVacations(DaService);
        List<int> IDS = await templit[0].TravelGroup.GetUserIDsFromRelation(4, "Favourited");
        if (IDS.Count != 0)
        {
            Console.WriteLine(IDS[0]);
        }
    }

    async public void PublishVacation()
    {
        List<Vacation> templit = await DaService.GetAllVacations(DaService);
        templit[0].State = "Published";
    }

    async public void RejectVacation()
    {
        List<Vacation> templit = await DaService.GetAllVacations(DaService);
        templit[0].State = "Rejected";
    }

    async public void CancelVacation()
    {
        List<Vacation> templit = await DaService.GetAllVacations(DaService);
        templit[0].State = "Canceled";
    }

    async public void StartGracePeriod()
    {
        List<Vacation> templit = await DaService.GetAllVacations(DaService);
        templit[0].State = "GracePeriod";
    }

    async public void CompleteVacation()
    {
        List<Vacation> templit = await DaService.GetAllVacations(DaService);
        templit[0].State = "Completed";
    }

    async public void ResetVacation()
    {
        List<Vacation> templit = await DaService.GetAllVacations(DaService);
        templit[0].State = "Proposed";
    }

    private void EmailCreator()
    {
        // create email message
        var email = new MimeMessage();
        email.From.Add(MailboxAddress.Parse("from_address@example.com"));
        email.To.Add(MailboxAddress.Parse("to_address@example.com"));
        email.Subject = "Test Email Subject";
        email.Body = new TextPart(TextFormat.Html) { Text = $"<h1>The Vacation you have favourited has changed to whatever the fuck</h1>" };

        // send email
        using var smtp = new SmtpClient();
        smtp.Connect("smtp.ethereal.email", 587, SecureSocketOptions.StartTls);
        smtp.Authenticate("mortimer55@ethereal.email", "bTsRwKbZBsxzt588RB");
        smtp.Send(email);
        smtp.Disconnect(true);
    }

}
