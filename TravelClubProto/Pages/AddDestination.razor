@page "/AddDestination"
@using TravelClubProto.Data
@inject DataAccessService DaService

<h2>
    @inputFeedback
</h2>


<BSForm Model="formsModelVal" OnValidSubmit="ValidFormSubmitted">
    <BSFormGroup>
        <BSLabel For="Country">Land</BSLabel>
        <BSInput Id="Country" InputType="InputType.Text" PlaceHolder="Indtast Land" @bind-Value="formsModelVal.Country"></BSInput>
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="Location">Location</BSLabel>
        <BSInput Id="Location" InputType="InputType.Text" PlaceHolder="Indtast Lokation" @bind-Value="formsModelVal.Location"></BSInput>
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="Hotel">Hotel</BSLabel>
        <BSInput Id="Hotel" InputType="InputType.Text" PlaceHolder="Indtast Hotel" @bind-Value="formsModelVal.Hotel"></BSInput>
    </BSFormGroup>
    <BSForm Model="formsModelAct" OnValidSubmit="ActivitySubmitted" Context="PricesForm" IsInline="true">
        <BSFormGroup Class="mb-2 mr-sm-2 mb-sm-0">
            <BSLabel For="Activity">Tilføj Aktivitet </BSLabel>
            <BSInput Id="Activity" InputType="InputType.Text" PlaceHolder="Aktivitet" @bind-Value="formsModelAct.Type"></BSInput>
        </BSFormGroup>
        <BSButton Color="Color.Secondary" ButtonType="ButtonType.Submit">Tilføj Aktivitet  </BSButton>
        <pre>@activityFeedback</pre>
    </BSForm>
    <BSButton Color="Color.Primary" ButtonType="ButtonType.Submit">Submit</BSButton>
</BSForm>

@code {

    public List<Activity> Activities = new List<Activity>();
    public string activityFeedback;
    public bool IsOpen1 = false;
    string inputFeedback = "Add a destination";


    public void ValidFormSubmitted()
    {
        inputFeedback = "Destination succesfully added";
        Destination d = new Destination(DaService);
        d.Location = formsModelVal.Location;
        d.Hotel = formsModelVal.Hotel;
        d.AddDate = DateTime.Now;
        d.Country = formsModelVal.Country;
        d.InsertDestinationIntoDataBase();
        int destID = d.GetID();
        foreach (Activity activity in Activities)
        {
            activity.InsertActivityIntoDataBase(destID);
        }
    }

    public class FormsModelVal
    {

        [Required]
        [StringLength(50, ErrorMessage = "Country Name too long (50 character limit).")]
        public string Country { get; set; }

        [Required]
        [StringLength(50, ErrorMessage = "Location too long (50 character limit).")]
        public string Location { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Hotel name too long (30 character limit).")]
        public string Hotel { get; set; }

        [Required]
        public Boolean Valid { get; set; }
    }
    FormsModelVal formsModelVal = new FormsModelVal();

    public class FormsModelAct
    {

        [Required]
        [StringLength(50, ErrorMessage = "Forklaring for lang (Maks 50 karakterer)")]
        public string Type { get; set; }

        [Required]
        public Boolean Valid { get; set; }
    }
    FormsModelAct formsModelAct = new FormsModelAct();


    public void ActivitySubmitted()
    {
        Activities.Add(new Activity(DaService, formsModelAct.Type));

        activityFeedback += "Aktivitet tilføjet: " + formsModelAct.Type + ".\n";
        formsModelAct.Type = "";
    }
}
