@page "/ProposeVacation"
@using TravelClubProto.Data
@inject DataAccessService DaService
@inject VacationData VacData

<h3>ProposeVacation</h3>

<BSForm Model="formsModelVal" OnValidSubmit="ValidFormSubmitted">
    <BSFormGroup>
        <BSLabel For="minNumberOfUsers">minNumberOfUsers</BSLabel>
        <BSInput Id="minNumberOfUsers" InputType="InputType.Number" PlaceHolder="0" @bind-Value="formsModelVal.minNumberOfUsers"></BSInput>
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="Hotel">Hotel</BSLabel>
        <BSInput Id="Hotel" InputType="InputType.Text" PlaceHolder="Enter Hotel" @bind-Value="formsModelVal.Hotel"></BSInput>
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="Deadline">Join Deadline</BSLabel>
        <BSInput InputType="InputType.Date" Id="Deadline" @bind-Value="@formsModelVal.Deadline"></BSInput>
    </BSFormGroup>
    <BSFormGroup>
        <BSLabel For="GraceperiodLength">GraceperiodLength in days</BSLabel>
        <BSInput Id="GraceperiodLength" InputType="InputType.Number" PlaceHolder="Length in days" @bind-Value="formsModelVal.GraceperiodLength"></BSInput>
    </BSFormGroup>
    <BSDropdown IsOpen="@IsOpen1">
        <BSDropdownToggle Color="Color.Secondary" @onclick="onClick1">Destinations</BSDropdownToggle>
        <BSDropdownMenu @bind-IsOpen="@IsOpen1">
            @foreach (Destination destination in destinations)
            {
                <BSDropdownItem IsButton="true" @onclick="@(e => activeDestination = destination.ID)">Location : @destination.Location . Hotel : @destination.Hotel </BSDropdownItem>
                <BSDropdownItem IsDivider="true"></BSDropdownItem>
            }
        </BSDropdownMenu>
    </BSDropdown>
    <BSForm Model="formsModelPrices" OnValidSubmit="PriceSubmitted" Context="PricesForm" IsInline="true">
            <BSFormGroup Class="mb-2 mr-sm-2 mb-sm-0">
                <BSLabel For="Price">Price number </BSLabel>
                <BSInput Id="Price" InputType="InputType.Number" PlaceHolder="Price" @bind-Value="formsModelPrices.price"></BSInput>
            </BSFormGroup>
            <BSFormGroup Class="mb-2 mr-sm-2 mb-sm-0">
                <BSLabel For="Break">Breakpoint number </BSLabel>
                <BSInput Id="Break" InputType="InputType.Number" PlaceHolder="Break" @bind-Value="formsModelPrices.breakPoint"></BSInput>
            </BSFormGroup>
            <BSButton Color="Color.Secondary" ButtonType="ButtonType.Submit">Add Price</BSButton>
            <pre>@priceFeedback</pre>
    </BSForm>
        <BSButton Color="Color.Primary" ButtonType="ButtonType.Submit">Submit</BSButton>
</BSForm>

    @code {

        public int activeDestination;
        public string priceFeedback;
        public List<decimal> Prices = new List<decimal>();
        public List<int> Breaks = new List<int>();
        public List<Destination> destinations = new List<Destination>();
        protected override async Task OnInitializedAsync()
        {
            destinations = await DaService.GetAllDestinations();
        }

        public void ValidFormSubmitted()
        {
            Vacation v = new Vacation(VacData, Breaks, Prices);
            v.State = "Proposed";
            v.MinNumberOfUsers = formsModelVal.minNumberOfUsers;
            v.MinNumberOfUsersExceeded = false;
            v.Dates.Add("ProposalDate", DateTime.Now);
            v.Dates.Add("GracePeriodDate", formsModelVal.Deadline.AddDays(formsModelVal.GraceperiodLength));
        }

        public bool IsOpen1 = false;

        //public  getDestinationInfo(Destination dest)
        //{
        //    Console.WriteLine(dest.ID);
        //}

        public void onClick1()
        {
            if (IsOpen1 == false)
            {
                IsOpen1 = true;
            }
            else
            {
                IsOpen1 = false;
            }
        }

        public class FormsModelVal
        {
            [Required]
            //TODO add more constraints.
            public int GraceperiodLength { get; set; }

            [Required]
            public DateTime Deadline { get; set; } = DateTime.Now;

            [Required]
            public int minNumberOfUsers { get; set; }

            [Required]
            [StringLength(30, ErrorMessage = "Hotel name too long (30 character limit).")]
            public string Hotel { get; set; }

            [Required]
            public Boolean Valid { get; set; }
        }
        FormsModelVal formsModelVal = new FormsModelVal();

        public void PriceSubmitted()
        {
            Prices.Add(formsModelPrices.price);
            Breaks.Add(formsModelPrices.breakPoint);

            priceFeedback += "Price: " + formsModelPrices.price + ". Breakpoint: " + formsModelPrices.breakPoint + ".\n";
        }

        public class FormsModelPrices
        {
            [Required]
            public decimal price { get; set; }
            [Required]
            public int breakPoint { get; set; }
        }
        FormsModelPrices formsModelPrices = new FormsModelPrices();


    }
