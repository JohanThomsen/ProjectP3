@page "/ProposeVacation"


@using Microsoft.Extensions.Configuration;
@using System.Collections.Generic;
@using System.Data;
@using Microsoft.Data.SqlClient;
@using System.Threading.Tasks;
@using Microsoft.EntityFrameworkCore.Migrations.Operations;
@using TravelClubProto.Data;
@inject DataAccessService DaService
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<BSJumbotron class="mytravelclubjumbotron">
    <BSNav IsList="true" IsVertical="true" class="mytravelclubmenulist">
        <li class="mytravelclubmenulistitem">
            <NavLink class="textcolor" href="MyTravelClub" Match="NavLinkMatch.All">
                <div class="mytravelclubmenulisticon">
                    <span class="oi oi-person" aria-hidden="true"></span>
                </div>
                Mit TravelClub
            </NavLink>
        </li>
        <li class="mytravelclubmenulistitem">
            <NavLink class="textcolor" href="ProposeVacation">
                <div class="mytravelclubmenulisticon">
                    <span class="oi oi-cog" aria-hidden="true"></span>
                </div>
                Tilbyd feriepakke
            </NavLink>
        </li>
        <li class="mytravelclubmenulistitem">
            <NavLink class="textcolor" href="AdminVacationBureau">
                <div class="mytravelclubmenulisticon">
                    <span class="oi oi-globe" aria-hidden="true"></span>
                </div>
                Administrer feriepakker
            </NavLink>
        </li>
    </BSNav>

        <div class="mytravelclubcontent">

          <h2 class="welcomemytravelclub">Foreslå Ferie</h2>
        <BSModal @ref="DestinationModal" IsCentered="true">
            <BSModalHeader OnClick="@OnToggleAddDestination">Opret Destination</BSModalHeader>
            <BSModalBody>
                <BSForm Model="formsModelDest" OnValidSubmit="ValidDestSubmitted">
                    <BSFormGroup>
                        <BSLabel For="Country">Land</BSLabel>
                        <BSInput Id="Country" InputType="InputType.Text" PlaceHolder="Indtast Land" @bind-Value="formsModelDest.Country"></BSInput>
                    </BSFormGroup>
                    <BSFormGroup>
                        <BSLabel For="Location">Location</BSLabel>
                        <BSInput Id="Location" InputType="InputType.Text" PlaceHolder="Indtast Lokation" @bind-Value="formsModelDest.Location"></BSInput>
                    </BSFormGroup>
                    <BSFormGroup>
                        <BSLabel For="Hotel">Hotel</BSLabel>
                        <BSInput Id="Hotel" InputType="InputType.Text" PlaceHolder="Indtast Hotel" @bind-Value="formsModelDest.Hotel"></BSInput>
                    </BSFormGroup>
                    <BSForm Model="formsModelAct" OnValidSubmit="ActivitySubmitted" Context="PricesForm" IsInline="true">
                        <BSFormGroup Class="mb-2 mr-sm-2 mb-sm-0">
                            <BSLabel For="Activity">Tilføj Aktivitet </BSLabel>
                            <BSInput Id="Activity" InputType="InputType.Text" PlaceHolder="Aktivitet" @bind-Value="formsModelAct.Type"></BSInput>
                        </BSFormGroup>
                        <BSButton Color="Color.Secondary" ButtonType="ButtonType.Submit">Tilføj Aktivitet  </BSButton>
                        <pre>@activityFeedback</pre>
                    </BSForm>
                    <BSButton Color="Color.Primary" ButtonType="ButtonType.Submit">Submit</BSButton>
                </BSForm>
            </BSModalBody>
        </BSModal>

        <BSForm Model="formsModelVal" OnValidSubmit="ValidFormSubmitted">
            <BSDropdown IsOpen="@IsOpen1">
                <BSDropdownToggle Color="Color.Primary" @onclick="onClick1">Destination</BSDropdownToggle>
                <BSDropdownMenu @bind-IsOpen="@IsOpen1">
                    @foreach (Destination destination in destinations)
                    {
                        <BSDropdownItem IsButton="true" @onclick="@(e => getDestinationInfo(destination))">Land: @destination.Country . Lokation : @destination.Location . Hotel : @destination.Hotel </BSDropdownItem>
                        <BSDropdownItem IsDivider="true"></BSDropdownItem>
                    }
                </BSDropdownMenu>
            </BSDropdown>
            <BSButton class="new-destination-btn" @onclick="OnToggleAddDestination" Color="Color.Secondary">Tilføj ny destination</BSButton>
                <pre> @destinationFeedback</pre>
            <BSFormGroup>
                <BSLabel For="Description">Beskrivelse</BSLabel>
                <BSInput Id="Description" InputType="InputType.TextArea" PlaceHolder="Indtast hotel" @bind-Value="formsModelVal.Description"></BSInput>
            </BSFormGroup>
            <BSFormGroup>
                <BSLabel For="DepartureAirport">Afrejse Lufthavn</BSLabel>
                <BSInput InputType="InputType.Text" Id="DepartureAirport" @bind-Value="@formsModelVal.DepartureAirport"></BSInput>
            </BSFormGroup>
            <BSFormGroup>
                <BSLabel For="TravelDate">Afrejse Dato</BSLabel>
                <BSInput InputType="InputType.Date" Id="TravelDate" @bind-Value="@formsModelVal.TravelDate"></BSInput>
            </BSFormGroup>
            <BSFormGroup>
                <BSLabel For="LeaveDate">Hjemrejse Dato</BSLabel>
                <BSInput InputType="InputType.Date" Id="LeaveDate" @bind-Value="@formsModelVal.LeaveDate"></BSInput>
            </BSFormGroup>
            <BSFormGroup>
                <BSLabel For="Deadline">Tilmeldingsfrist</BSLabel>
                <BSInput InputType="InputType.Date" Id="Deadline" @bind-Value="@formsModelVal.Deadline"></BSInput>
            </BSFormGroup>
            <BSFormGroup>
                <BSLabel For="TravelBureauWebsiteLink">Link til ferie på egen hjemmeside</BSLabel>
                <BSInput InputType="InputType.Text" Id="TravelBureauWebsiteLink" @bind-Value="@formsModelVal.TravelBureauWebsiteLink"></BSInput>
            </BSFormGroup>
            <BSFormGroup>
                <BSLabel For="GraceperiodLength">Betalingsperiode</BSLabel>
                <BSInput Id="GraceperiodLength" InputType="InputType.Number" PlaceHolder="Længde i dage" @bind-Value="formsModelVal.GraceperiodLength"></BSInput>
            </BSFormGroup>
            <BSFormGroup>
                <BSLabel For="ImageLink">Billede</BSLabel>
                <BSInput Id="ImageLink" InputType="InputType.Text" PlaceHolder="Webadresse til billede" @bind-Value="formsModelVal.ImageLink"></BSInput>
            </BSFormGroup>
            <BSFormGroup>
                <BSLabel For="minNumberOfUsers">Minimum antal deltagere</BSLabel>
                <BSInput Id="minNumberOfUsers" InputType="InputType.Number" PlaceHolder="0" @bind-Value="formsModelVal.minNumberOfUsers"></BSInput>
            </BSFormGroup>
            <BSRow>
                <BSCol>
                    <BSForm Model="formsModelPrices" OnValidSubmit="PriceSubmitted" Context="PricesForm">
                        <BSFormGroup Class="mb-2 mr-sm-2 mb-sm-0">
                            <div class="PricePoint">
                                <BSLabel For="Price">Pris </BSLabel>
                                <BSInput Id="Price" InputType="InputType.Number" PlaceHolder="Prispunkt" @bind-Value="formsModelPrices.price"></BSInput>
                            </div>
                        </BSFormGroup>
                        <BSFormGroup Class="mb-2 mr-sm-2 mb-sm-0">
                            <div class="NumberOfParticipants">
                                <BSLabel For="Break">Antal deltagere for pris </BSLabel>
                                <BSInput Id="Break" InputType="InputType.Number" PlaceHolder="Antal deltagere for pris" @bind-Value="formsModelPrices.breakPoint"></BSInput>
                            </div>
                        </BSFormGroup>
                        <div class="AddPriceButton">
                            <BSButton Color="Color.Secondary" ButtonType="ButtonType.Submit">Tilføj pris  </BSButton>
                        </div>
                    </BSForm>
                </BSCol>
                <BSCol>
                    <pre class="textAddprice">@priceFeedback </pre>
                </BSCol>
            </BSRow>
            <BSButton Color="Color.Primary" ButtonType="ButtonType.Submit">Tilføj ferie</BSButton>
        </BSForm>
        </div>
</BSJumbotron>

@code {
    public string destinationFeedback;
    public int activeDestination;
    public string priceFeedback;
    public List<decimal> Prices = new List<decimal>();
    public List<int> Breaks = new List<int>();
    public List<Destination> destinations = new List<Destination>();
    public List<Activity> Activities = new List<Activity>();
    public string activityFeedback;
    BSModal DestinationModal;

    string inputFeedback = "Add a destination";

    protected override async Task OnInitializedAsync()
    {
        destinations = await DaService.GetAllDestinations(DaService);
    }

    public void ValidFormSubmitted()
    {
        Vacation v = new Vacation(Breaks, Prices, DaService);
        v.State = "Proposed";
        v.MinNumberOfUsers = formsModelVal.minNumberOfUsers;
        v.Dates.Add("ProposalDate", DateTime.Now);
        v.Dates.Add("Deadline", formsModelVal.Deadline);
        v.Dates.Add("GracePeriodLength", formsModelVal.Deadline.AddDays(formsModelVal.GraceperiodLength));
        v.Dates.Add("PriceChangeDate", DateTime.Now);
        v.Dates.Add("TravelDate", formsModelVal.TravelDate);
        v.Dates.Add("LeaveDate", formsModelVal.LeaveDate);
        v.ImageLink = formsModelVal.ImageLink;
        v.Description = formsModelVal.Description;
        v.FK_DestinationID = activeDestination;
        v.FK_PublisherID = DaService.LoggedInAccountID;
        v.DepartureAirport = formsModelVal.DepartureAirport;
        v.TravelBureauWebsiteLink = formsModelVal.TravelBureauWebsiteLink;
        v.InsertVacationToDatabase();
    }

    public void ValidDestSubmitted()
    {
        inputFeedback = "Destination succesfully added";
        Destination d = new Destination(DaService);
        d.Location = formsModelDest.Location;
        d.Hotel = formsModelDest.Hotel;
        d.AddDate = DateTime.Now;
        d.Country = formsModelDest.Country;
        d.InsertDestinationIntoDataBase();
        int destID = d.GetID();
        foreach (Activity activity in Activities)
        {
            activity.InsertActivityIntoDataBase(destID);
        }
        d.ID = destID;
        destinations.Add(d);
        getDestinationInfo(d);
    }

    public bool IsOpen1 = false;

    public void getDestinationInfo(Destination dest)
    {
        activeDestination = dest.ID;
        IsOpen1 = false;
        destinationFeedback = $"\nSelected Hotel: {dest.Hotel}, Location {dest.Location}, Country {dest.Country}";
    }

    public void onClick1()
    {
        if (IsOpen1 == false)
        {
            IsOpen1 = true;
        }
        else
        {
            IsOpen1 = false;
        }
    }

    public class FormsModelVal
    {
        [Required]
        [StringLength(100, ErrorMessage = "LufthavnsNavn for lang (100 character limit).")]
        public string DepartureAirport { get; set; }


        [Required]
        //TODO add more constraints.
        public int GraceperiodLength { get; set; }

        [Required]
        public DateTime Deadline { get; set; } = DateTime.Now;

        [Required]
        public DateTime TravelDate { get; set; } = DateTime.Now;

        [Required]
        public DateTime LeaveDate { get; set; } = DateTime.Now;

        [Required]
        public int minNumberOfUsers { get; set; }

        [Required]
        public int PublisherID { get; set; }

        [Required]
        [StringLength(1000, ErrorMessage = "Beskrivelse for lang (1000 character limit).")]
        public string Description { get; set; }

        [Required]
        [StringLength(1000, ErrorMessage = "Link er for langt max 1000 karakterer.")]
        public string ImageLink { get; set; }

        [Required]
        [StringLength(1000, ErrorMessage = "Link er for langt max 1000 karakterer.")]
        public string TravelBureauWebsiteLink { get; set; }

        [Required]
        public Boolean Valid { get; set; }
    }
    FormsModelVal formsModelVal = new FormsModelVal();

    public class FormsModelDest
    {
        [Required]
        [StringLength(50, ErrorMessage = "Country Name too long (50 character limit).")]
        public string Country { get; set; }

        [Required]
        [StringLength(50, ErrorMessage = "Location too long (50 character limit).")]
        public string Location { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Hotel name too long (30 character limit).")]
        public string Hotel { get; set; }

        [Required]
        public Boolean Valid { get; set; }
    }
    FormsModelDest formsModelDest = new FormsModelDest();



    public void PriceSubmitted()
    {
        Prices.Add(formsModelPrices.price);
        Breaks.Add(formsModelPrices.breakPoint);

        priceFeedback += "Price: " + formsModelPrices.price + ". Breakpoint: " + formsModelPrices.breakPoint + ".\n";
    }

    public class FormsModelPrices
    {
        [Required]
        public decimal price { get; set; }
        [Required]
        public int breakPoint { get; set; }
    }
    void OnToggleAddDestination(MouseEventArgs e)
    {
        DestinationModal.Toggle();
    }

    public class FormsModelAct
    {

        [Required]
        [StringLength(50, ErrorMessage = "Forklaring for lang (Maks 50 karakterer)")]
        public string Type { get; set; }

        [Required]
        public Boolean Valid { get; set; }
    }
    FormsModelAct formsModelAct = new FormsModelAct();

    public void ActivitySubmitted()
    {
        Activities.Add(new Activity(DaService, formsModelAct.Type));

        activityFeedback += "Aktivitet tilføjet: " + formsModelAct.Type + ".\n";
        formsModelAct.Type = "";
    }


    FormsModelPrices formsModelPrices = new FormsModelPrices();

    void LogOut(MouseEventArgs e)
    {
        DaService.LoggedIn = false;
    }
}
