
@page "/SingleVacation/{VacationID}"

@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using Microsoft.Extensions.Configuration;
@using System.Collections.Generic;
@using System.Data;
@using Microsoft.Data.SqlClient;
@using System.Threading.Tasks;
@using Microsoft.EntityFrameworkCore.Migrations.Operations;
@using TravelClubProto.Data;

@inject DataAccessService DaService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JS;




<h3 class="page_title">Se ferier</h3>

<BSJumbotron Class="ViewSingleVacationJumbotron">
        <div class="ViewSingleVacationImage">
            <BSFigureImage src="@vac.ImageLink" />
        </div>
        <br />

        <div class="ViewSingleVacationHotel">
            <h2>@vac.Destination.Hotel, @vac.Destination.Location</h2>
            <h10>ID:  @vac.ID </h10>
        </div>


            <div class="SingleVacationDescriptionColumn">
                <h4>Beskrivelse af ferien:</h4>
                <p><b>Afrejselufthavn:</b> @vac.DepartureAirport</p>
                <p>@vac.Description</p>
                <h4>Activities:</h4>
                @foreach (Activity item in vac.Destination.Activities)
                {
                    <p>@item.Type</p>
                }
            </div>


            <div class="ParticipantDetailColumn">
                <div class="ViewVacPriceContainer">
                    <h6>Prices from: @vac.Prices[vac.Prices.Count - 1] kr. - @vac.Prices[0] kr. </h6>
                    <div class="progressBarGenerator">
                        @for (int i = 0; i < vac.StretchGoals.Count; i++)
                        {
                            <div class="progStretchGoal">
                                <progress class="progressBarJoinedUsers" max=@vac.StretchGoals[i] value=@ValueCalc(vac.StretchGoals, vac.StretchGoals[i], joinedUsersHolder)></progress>
                                <div class="progressBarPriceGoal">
                                    @(vac.Prices[i]+ " kr.")
                                </div>
                            </div>
                        }
                    </div>

                    <div class="ViewVacationButtons">
                        @if (!vac.TravelGroup.CheckForRelation(DaService.LoggedInAccountID, "Joined").GetAwaiter().GetResult())
                        {
                            <BSButton @onclick="@(e => JoinVacation(vac))" Color="Color.Primary">Tilmeld Ferie</BSButton>
                        }
                        else
                        {
                            <BSButton @onclick="@(e => vac.TravelGroup.LeaveVacation(DaService.LoggedInAccountID))" Color="Color.Danger">Forlad Ferie</BSButton>
                        }
                        <input type="button" id="@vac.ID" value="" class="btn btn-outline-info btn-lg HeartIconNotFill" @onclick="@(e => FavouriteVacation(vac))" />
                    </div>
                    <div class="ViewVacDeadlineDate">
                        <h6>Deadline: @vac.Dates["Deadline"]</h6>
                    </div>
                </div>
                <div class="ViewVacMoreInfoBtn">
                    <a class="btn btn-primary" href="@vac.TravelBureauWebsiteLink" role="button">Se mere</a>
                </div>
            </div>

                @*MODAL FOR LOGIN PROMPT*@
                <BSModal @ref="LoginModal" IsCentered="true">
                    <BSModalHeader OnClick="@OnToggleLogin">Log ind</BSModalHeader>
                    <BSModalBody>
                        <p>
                            <BSForm Model="@formsModelVal" OnValidSubmit="ConsoleWrite">

                                <BSFormGroup>
                                    @*Input for user email*@
                                    <BSLabel for="InputEmail">Email-adresse</BSLabel>
                                    <BSInput id="InputEmail" InputType="InputType.Email" PlaceHolder="Indtast Email" @bind-Value="formsModelVal.Email"></BSInput>
                                </BSFormGroup>

                                <BSFormGroup>
                                    @*Input for user password*@
                                    <BSLabel for="InputPassword">Kodeord</BSLabel>
                                    <BSInput id="InputPassword" InputType="InputType.Password" PlaceHolder="Indtast Kodeord" @bind-Value="formsModelVal.Password"></BSInput>
                                </BSFormGroup>

                                <BSButton class="createAccount" @onclick="OnToggleCreateProfile">Har du ikke en profil? Opret en profil her!</BSButton>

                                @*Submit Button*@
                                <BSButton Color="Color.Primary" ButtonType="ButtonType.Submit" @onclick="LogInToProfile">Log ind</BSButton>
                            </BSForm>
                        </p>
                    </BSModalBody>
                </BSModal>

                @*MODAL FOR CREATEPROFILE PROMPT*@
                <BSModal @ref="CreateProfileModal" IsCentered="true">
                    <BSModalHeader OnClick="@OnToggleCreateProfile">Opret Bruger</BSModalHeader>
                    <BSModalBody>
                        <p>
                            <BSForm Model="@formsModelVal" OnValidSubmit="ConsoleWrite">

                                <BSFormGroup>
                                    @*Input for user email*@
                                    <BSLabel for="InputEmail">Email-adresse</BSLabel>
                                    <BSInput id="InputEmail" InputType="InputType.Email" PlaceHolder="Indtast Email" @bind-Value="formsModelVal.Email"></BSInput>
                                </BSFormGroup>

                                <BSFormGroup>
                                    @*Input for user password*@
                                    <BSLabel for="InputPassword">Kodeord</BSLabel>
                                    <BSInput id="InputPassword" InputType="InputType.Password" PlaceHolder="Indtast Kodeord" @bind-Value="formsModelVal.Password"></BSInput>
                                </BSFormGroup>

                                <BSButton class="createAccount" @onclick="OnToggleLogin">Har du allerede en profil? Log ind!</BSButton>

                                @*Submit Button*@
                                <BSButton Color="Color.Primary" ButtonType="ButtonType.Submit" @onclick="SaveProfileToTables">Opret Bruger</BSButton>
                            </BSForm>
                        </p>
                    </BSModalBody>
                </BSModal>

                <BSModal @ref="WarningBox" Size="Size.Medium">
                    <BSModalHeader Class="Modal-title text-center" OnClick="@LogInToProfile">INFO</BSModalHeader>
                    <BSModalBody><p>Den indtastede Email eller Password er ikke indtastet korrekt. <br /> Prøv venligst igen.</p></BSModalBody>
                </BSModal>

                <BSModal @ref="JoinedInfoBox" Size="Size.Medium">
                    <BSModalHeader Class="Modal-title text-center" OnClick="@LogInToProfile">INFO</BSModalHeader>
                    <BSModalBody><p>Du er nu tilmeldt denne ferie. <br /> Du kan finde den under "Min profil" --> "Tilmeldte feriepakker"</p></BSModalBody>
                </BSModal>
</BSJumbotron>


@code {
    BSModal JoinedInfoBox;
    BSModal LoginModal;
    BSModal CreateProfileModal;
    BSModal WarningBox { get; set; }
    int joinedUsersHolder;
    int stretchGoalsMax;
    int customerID;
    CustomerVacations cusvac;
    Vacation vac = null;
    public List<Vacation> vacations;
    string notloggedinfeedback;

    [Parameter]
    public string VacationID { get; set; }

    void OnToggleLogin(MouseEventArgs e)
    {
        CreateProfileModal.Hide();
        LoginModal.Toggle();

    }

    void OnToggleCreateProfile(MouseEventArgs e)
    {
        LoginModal.Hide();
        CreateProfileModal.Toggle();
    }

    void JoinVacation(MouseEventArgs e)
    {
        JoinedInfoBox.Toggle();
    }

    async void LogInToProfile(MouseEventArgs e)
    {
        LoginModal.Toggle();
        //returnerer ID ved succes og -1 ved fail
        int ID = await DaService.FindAccountInDatabase(formsModelVal.Email, formsModelVal.Password, DaService);

        if (ID != -1)
        {
            DaService.LoggedIn = true;
        }
        else
        {
            DaService.LoggedIn = false;
        }

        if (DaService.LoggedIn == false)
        {
            WarningBox.Toggle();
        }
        else
        {
            DateTime expiry = DateTime.Now.AddHours(2);
            await localStorage.ClearAsync();
            await localStorage.SetItemAsync("login", ID + "," + expiry);
        }
    }

    void SaveProfileToTables(MouseEventArgs e)
    {
        Customer newUser = new Customer(formsModelVal.Email, formsModelVal.Password, DaService);
        newUser.InsertIntoDatabase();
        CreateProfileModal.Toggle();
    }


    public class FormsModelVal
    {
        [Required]
        [StringLength(50, ErrorMessage = "email too long (50 character limit).")]
        public string Email { get; set; }

        [Required]
        [StringLength(20, ErrorMessage = "password too long (20 character limit).")]
        public string Password { get; set; }

        [Required]
        public Boolean Valid { get; set; }
    }
    FormsModelVal formsModelVal = new FormsModelVal();

    void ConsoleWrite()
    {
        Console.WriteLine("Form succesfully submitted");
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CheckForAndFillHearts();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        vac = await DaService.GetVacationByID(DaService, Convert.ToInt32(VacationID));
        joinedUsersHolder = vac.TravelGroup.GetUserIDsFromRelation(vac.ID, "Joined").ConfigureAwait(true).GetAwaiter().GetResult().Count;
        stretchGoalsMax = vac.StretchGoals.Max();

    }

    public async void checkCookie()
    {
        string cookie = await localStorage.GetItemAsStringAsync("login");
        string[] splitCookie = cookie.Split(",");
        if (Convert.ToDateTime(splitCookie[1]) > DateTime.Now)
        {
            customerID = Convert.ToInt32(splitCookie[0]);
        }
    }

    public void JoinVacation(Vacation vac)
    {
        checkCookie();
        if (DaService.LoggedIn == true)
        {
            notloggedinfeedback = string.Empty;
            vac.TravelGroup.ChangeVacationRelation(DaService.LoggedInAccountID, "Joined");
            JoinedInfoBox.Toggle();
        }
        else
        {
            notloggedinfeedback = "Du skal være logged in før du kan bruge denne funktionalitet";
            LoginModal.Toggle();
        }
    }

    public void FavouriteVacation(Vacation vac)
    {
        if (DaService.LoggedIn == true)
        {
            if (vac.TravelGroup.CheckForRelation(customerID, "Favourited").GetAwaiter().GetResult() == false)
            {
                checkCookie();
                vac.TravelGroup.ChangeVacationRelation(customerID, "Favourited");
                JS.InvokeAsync<string>("ToggleClass", Convert.ToString(vac.ID));
            }
            else
            {
                vac.TravelGroup.LeaveVacation(customerID);
                JS.InvokeAsync<string>("ToggleClass", Convert.ToString(vac.ID));
            }
        }
        else
        {
            notloggedinfeedback = string.Empty;
            notloggedinfeedback = "Du skal være logged in før du kan bruge denne funktionalitet";
            LoginModal.Toggle();
        }
    }

    private void CheckForAndFillHearts()
    {
        checkCookie();
        if (DaService.LoggedIn == true)
        {
            if (vac.TravelGroup.CheckForRelation(DaService.LoggedInAccountID, "Favourited").GetAwaiter().GetResult() == true)
            {
                JS.InvokeAsync<string>("FillHeart", Convert.ToString(vac.ID));
            }
        }
    }



    @*Calculates progress bar fill value from joined user and stretch goals*@
    int ValueCalc(List<int> stretchGoals, int currGoal, int joinedUsers)
    {
        int prevIndex = stretchGoals.IndexOf(currGoal) == 0 ? 0 : stretchGoals.IndexOf(currGoal) - 1;
        int prevGoal = stretchGoals[prevIndex];

        if (joinedUsers >= currGoal)
        {
            return currGoal;
        }
        else if (currGoal.Equals(stretchGoals[0]))
        {
            return joinedUsers;
        }
        else
        {
            return joinedUsers - prevGoal;
        }
    }



    //async public void JoinVacation()
    //{
    //    List<Vacation> templit = await DaService.GetAllVacations(DaService);
    //    templit[0].TravelGroup.ChangeVacationRelation(15, 34, "Joined");
    //}

    //async public void FavouriteVacation()
    //{
    //    List<Vacation> templit = await DaService.GetAllVacations(DaService);
    //    Console.WriteLine(templit[0].ID);
    //    templit[0].TravelGroup.ChangeVacationRelation(15, 34, "Favourited");
    //}


}
